#pragma once

#include <ios>
#include <cwchar>
#include <stddef.h>

namespace std {

    template<class charT> struct char_traits;
    template<> struct char_traits<char16_t>;
    template<> struct char_traits<char32_t>;
    template<> struct char_traits<wchar_t>;

    template<> struct char_traits<char> {
        using char_type = char;
        using int_type = int;
        using off_type = streamoff;
        using pos_type = streampos;
        using state_type = mbstate_t;

        //assign
        //eq
        
        static constexpr bool lt(char_type c1, char_type c2) {
            return static_cast<unsigned char>(c1) < static_cast<unsigned char>(c2);
        }

        //move
        //copy

        static constexpr int compare(const char_type* s1, const char_type* s2, size_t count) {

            if (count == 0) {
                return 0;
            }
            
            for (auto i = 0u; i < count; i++) {
                if (lt(s1[i], s2[i])) {
                    return -1;
                }
                else if (lt(s2[i], s1[i])) {
                    return 1;
                }
            }

            return 0;
        }

        static constexpr size_t length(const char_type* s) {
            size_t i = 0;

            while (*s != char_type()) {
                i++;
                s++;
            }

            return i;
        }

        //to_char_type
        //to_int_type
        //eq_int_type
        //eof
        //not_eof
    };

   
}