#pragma once

#include <utility>

namespace std {

    template<class T> class deque;

    template<class T, class Container = std::deque<T>>
    class stack {
    public:
        
        using value_type = typename Container::value_type;
        using reference = typename Container::reference;
        using const_reference = typename Container::const_reference;
        using size_type = typename Container::size_type;
        using container_type = Container;

        explicit stack(Container&& cont = Container()) {
            c = std::move(cont);
        }

        bool empty() const { 
            return c.empty();
        }

        size_type size() const {
            return c.size();
        }

        reference top() {
            return c.back();
        }

        const_reference top() const {
            return c.back();
        }

        void push(const value_type& x) {
            c.push_back(x);
        }

        void pop() {
            c.pop_back();
        }

    protected:
        
        Container c;
    };
}