This chronicals my new research OS, Saturn, named after the Saturn V.

"We choose to do [this], not because [it] is easy, but because [it] is hard; because that goal will serve to organize and measure the best of our energies and skills..."

My initial goal is to boot into a self hosting environment, where I can
work on the kernel in a live environment.

* Step 1: The Cross Compiler
compiling with clang:

clang -c filename.c -o filename.o --target=i686-pc-none-elf -march=i686
    -ffreestanding -fno-exceptions -fno-rtti -Wall -Wextra

boot asm:

i686-elf-as boot.s -o boot.o

linking the kernel:

clang -T src/linker.ld -o saturn.bin -ffreestanding -nostdlib boot.o kernel.o
    --target=i686-pc-none-elf -march=i686

* Step 2: Basic printing to screen

note: capturing lambdas are supported


implemented basic printf with %c, %s, %d, %x, %o supported

* Step 3: IDT

note: objdump is really helpful

cpuid_vendor values:
eax: 4, ebx: 0x756e6547, ecx: 6c65746e, edx: 49656e69

* GDB:

x/20d address
s
n
si
info registers
x/i $pc
fin

* Step 4: Paging

got basic paging to work. so far:
create PageDirectory, PageTables. Identity map from 0 to kernelENd
Can allocate a page after paging enabled and then access it

next steps:
** DONE - remove/refactor kernel page table hardcoding
** DONE _ physical page allocation should happen in page fault handler
remove the actual individual *Page* allocations, but keep the allocations
for page tables and directories
** DONE - page fault handler
*** detect if its an invalid memory access, or an unallocated one
*** allocate physical pages on demand
** switch to higher half kernel

* Step 5: APIC & Interrupts

Note: PMM must be able to mark specific addresses as used

* Step 6: Multitasking

Very interesting note from f.osdev.org/viewtopic.php?f=15&t=30555

"This was exactly my line of thinking. If the driver identifies itself as belonging to a class (say "keyboard", to keep with the discussion), only grant it permissions for keyboard access. If it attempts to access services that it is not granted permissions to, the OS could either deny those requests or unload the driver entirely, depending on how critical the operation it performs is.

Of course, this doesn't prevent some odd behavior, such as a driver that simply transmutes the data (i.e. when an "A" is pressed, forward a "Q" to the kernel). In practice though, there is no reasonable precaution to be taken against that.

This also allows for the kernel to have some interesting/novel features to aid the programmer, as Brendan alluded to awhile back - the kernel could be instructed to log all driver I/O activity, for example, which would greatly aid in debugging new or experimental drivers."


-----------------

System calls: 0xFF (Final Fantasy)
0xFF, EAX=7, 9, A

** Next Steps
- [X] extract the TSS stuff and put it in its proper place
- [X] pass address to ring3 function instead of hardcoding taskA's
- [X] implement thread state
- [X] implement switch_to(thread)
- [X] implement find_thread_to_switch_to()
- [X] implement block_thread(reason)
- [X] implement unblock_thread(reason)

* Intermission
- [X] malloc
- [X] libc++
  - [X] new

* Step 7: Usermode VGA Driver
- [X] IPC
** IPC Design
   -each task will have a dedicated block of memory for storing messages, allocated after the kernel stack
   -asynchronous send, unless target's mailbox is full then blocks
   
   possible to have a shared mailbox? for tasks A and B that want to communicate without interrupts,
   task A allocates a mailbox and sends the address to b, b maps that as readonly,
   b then creates its own

- [X] Driver framework, driver identification (eg load as VGA_DRIVER grants 0xb000 user-mode memory mapped to the driver)
  
* Step 8: Usermode Terminal Emulator
- [X] handle common ansi escape sequences (colour, moving the cursor)

* Step 9: Usermode Keyboard Driver

aside: use scheme as the shell scripting language

* Step 10: Shell

(send <servicename> <message>)
sends the message to the service

(ask <servicename> <message>)
sends the message to the service, and waits for a response

* Step 11: VFS
-instead of Plan9's "everything is a file system", everything is a COM-like object
-use the same per-process namespaces, union binds

/process/1 is an IProcess*

instead of ps enumerating /process and reading each exec file for the filename,
it enumerates a list of IProcess* and returns process->filename

IUnknown supports reflection with a method GetFunctionNames

/process/1->GetFunctionNames()
/process/1->DescribeFunction(name)

so from a console to interact with an object:

shell> /process/1->GetFunctionNames()
GetExecutable
GetArguments
GetStartTime
Receive

shell> /process/1->DescribeFunction(Receive)
Receive(IPC::Message* message)

imitating Rio:

/window/1 is an IWindow*

perhaps a mechanism for IUnknowns to have subdirectories, mark some
internal collection property as a subdirectory, for instance:

class IWindow {
[SubdirectoryAttribute]
vector<IWindow> children;
}

/window/1/children

similarly for the above example, GetFunctionNames could be a file:

/process/1/functionNames

cat /process/1/functionNames
GetExecutable
...

maybe its not a com object, but a mailbox
send /process/1 GetSupportedMessages
...

send /process/1 GetExecutable
send /window/1/mainTxtBox GetText
send /window/1 paste <text>

-----------------

reading/writing to properties works as expected
reading a function returns its signature, and maybe documentation/examples
writing a function executes it with optional arguments, and returns a result
via a message to the original sender

shell> echo "test" > /window/1/pasteText
success/fail message

shell> cat /window/1/pasteText
pasteText(char* text)
If the focused control accepts text input (ie a textbox),
inserts the text in the control starting where the cursor is

If not, returns a failure message

reading/writing a function sends a message and then calls receive

from c++, it could look like:

void demo() {
    write("/window/1/pasteText", "some text here");
    IPC::MaximumMessageBuffer buffer;
    receive(&buffer);
}

abstracted:

IPC::MaximumMessageBuffer call(char* path, char* arg0) {
    write(path, arg0);
    IPC::MaximumMessageBuffer buffer;
    receive(&buffer);
    return buffer;
}

void demo2() {
    auto msg = call("/window/1/pasteText", "some text");
}

do functions need to be open()'d before reading/writing?

-what open does is walk up the tree to find the first VFSObject instance
-if valid, it asks the instance for a function id matching the path
-if valid, creates a file descriptor storing the instance and function id

auto func = open("/window/1/pasteText");
write(func, "some text");

text vs binary interface:

in either case the send message just has a uint8_t[] buffer

for some definition like :

void f(char* s, int x, bool b);

buffer[] = {s[0]...s[strlen], '\0',
x[0], x[1], x[2], x[3], b[0]};

auto fd = open("/example/f");
write(fd, buffer);

struct ArgV {
template<typename T>
void append(T arg) {
if (position < bufferSize) {
memcpy(buffer + position, &arg, sizeof(T));
position += sizeof(T);
}
}

uint8_t buffer[256];
uint32_t position {0};
};

ArgV args {};
args.append("hello, world");
args.append(1234);
args.append(true);

write(fd, args.buffer, args.position);

on the receiving end:

example::write(int fd, argv) {
    if (fd == f) {
        auto& str = argv.read<char*>();
        auto& x = argv.read<int>();
        auto& b = argv.read<bool>();

        f(str, x, b);
    }

}

how to actually handle the call?
-need an instance of the object containing the method
-need to record what method we want
-have only one file descriptor

file descriptor backing instances could be a hierarchy,
method calls could be a subclass of regular fds

struct MethodFileDescriptor {
?? instance;
?? method;
}; 

can't convert ptr to member func to void*
well, method could be an enum
instance could be a pointer to something that handles write(enum, argv)

class VFSObject {
public: 

virtual void write(int functionId, void* data) = 0;
}

class Window : VFSObject {
public:

virtual void write(int functionId, void* data) {

ArgV args{data};

switch(functionId) {
case static_cast<int>(ExportedFunctions::PasteText): {
auto& text = args.read<char*>();
..other reads..

if (args.handledAllReads()) {
    pasteText(text);
    auto msg = constructReplyMessage();
!! needs original sender id?
    send(msg);
}

}
}
}

private:

enum class ExportedFunctions {
  ...
  PasteText = x,
  ...
}

}


sender calls write, which creates a WriteMessage, and sends it to
the mount point. mount point extracts sender id, file descriptor id,
buffer ptr, then 

auto& desciptor = openDescriptors[id];
descriptor.write(senderId, ptr)

descriptor::write(senderId, ptr) {
instance->write(functionId, senderId, ptr);
}


vostok: virtual object system something something something
reading a function returns the interface descriptor language (IDL)
for that func, which is then used to create a VostokBuffer,
a byte stream where each entry is prefixed with a uint8_t identifying
the type

enum class VostokTypes {
    uint32_t,
    char*,
    EndArg
};

read("/process/1/getExecutable");
VostokBuffer buf {readMsg.buffer};

VostokBuffer::write<T>(T t, VostokType type) {
    /*
    end of the buffer contains the types

    assuming data[256]

    data[255] = VostokType arg 0
    data[254] = VostokType arg 1
    ...
    data[n] = VostokType::EndArg

    nextTypeIndex = 255;
    remainingSize = scan for VostokType::EndArg
    nextWriteIndex = 0;
    */
    if (data[nextTypeIndex] == EndArg || 
        type != data[nextTypeIndex]) {
        //error
    }
    else {
        nextTypeIndex--;
        memcpy(data + nextWriteIndex, t, length?);
    }
}

vostok create /process/1 lang=c++

outputs process.h
class Process {
public:

Process(char* path);

char* getExecutable();
bool testA(int x);

private:

uint32_t descriptor;
}

process.cpp:

Process::Process(char* path) {
open(path);
read(buffer);
descriptor = buffer.descriptor or error;
}

char* Process::getExecutable() {

write(descriptor, nullptr);
read(buffer);

VostokBuffer buf {buffer};

return buf.read<char*>();
}

bool Process::testA(int x) {
VostokBuffer buf{writeMsg.buffer};
buf.write<int>(x);
write(descriptor, buf.data, buf.length);
read(buffer);
buf = {buffer};
return buf.read<bool>(); or error
}

Next steps:

- [X] supporting vostok properties
- [X] write vostok functions with args
- [X] create syscall wrapper
- [X] create a new process object per process
- [ ] only allow kernel to write to process object
- [ ] add a hardware filesystem mounted at /hardware to store read-only info
       about the detected hardware (later mount to /system/hardware when mounts
       support non-root mounting)
- [X] implement string_view
- [X] replace char* with string_view wherever possible
- [X] implement a split() func that returns a vector of string_views
       to tidy up the shell
- [X] add one line history support to shell

** Interlude
- [ ] cleanup all warnings
- [ ] cleanup all commented-out code
- [ ] start documenting some stuff
- [X] make a services make.config just like userland to cleanup makefile
- [ ] tidy up ugly code
- [ ] fix occasional startup hang
